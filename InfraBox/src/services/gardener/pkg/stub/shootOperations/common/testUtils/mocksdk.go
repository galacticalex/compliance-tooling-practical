// Code generated by MockGen. DO NOT EDIT.
// Source: sdkInterface.go

// Package testUtils is a generated GoMock package.
package testUtils

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	reflect "reflect"
)

// MockSdkOperations is a mock of SdkOperations interface
type MockSdkOperations struct {
	ctrl     *gomock.Controller
	recorder *MockSdkOperationsMockRecorder
}

// MockSdkOperationsMockRecorder is the mock recorder for MockSdkOperations
type MockSdkOperationsMockRecorder struct {
	mock *MockSdkOperations
}

// NewMockSdkOperations creates a new mock instance
func NewMockSdkOperations(ctrl *gomock.Controller) *MockSdkOperations {
	mock := &MockSdkOperations{ctrl: ctrl}
	mock.recorder = &MockSdkOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSdkOperations) EXPECT() *MockSdkOperationsMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSdkOperations) Create(o runtime.Object) error {
	ret := m.ctrl.Call(m, "Create", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockSdkOperationsMockRecorder) Create(o interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSdkOperations)(nil).Create), o)
}

// Update mocks base method
func (m *MockSdkOperations) Update(o runtime.Object) error {
	ret := m.ctrl.Call(m, "Update", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSdkOperationsMockRecorder) Update(o interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSdkOperations)(nil).Update), o)
}

// Delete mocks base method
func (m *MockSdkOperations) Delete(o runtime.Object, opts ...interface{}) error {
	varargs := []interface{}{o}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSdkOperationsMockRecorder) Delete(o interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{o}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSdkOperations)(nil).Delete), varargs...)
}

// Get mocks base method
func (m *MockSdkOperations) Get(o runtime.Object) error {
	ret := m.ctrl.Call(m, "Get", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockSdkOperationsMockRecorder) Get(o interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSdkOperations)(nil).Get), o)
}

// List mocks base method
func (m *MockSdkOperations) List(namespace string, o runtime.Object) error {
	ret := m.ctrl.Call(m, "List", namespace, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List
func (mr *MockSdkOperationsMockRecorder) List(namespace, o interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSdkOperations)(nil).List), namespace, o)
}

// WithDeleteOptions mocks base method
func (m *MockSdkOperations) WithDeleteOptions(metaDeleteOptions *v1.DeleteOptions) interface{} {
	ret := m.ctrl.Call(m, "WithDeleteOptions", metaDeleteOptions)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// WithDeleteOptions indicates an expected call of WithDeleteOptions
func (mr *MockSdkOperationsMockRecorder) WithDeleteOptions(metaDeleteOptions interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDeleteOptions", reflect.TypeOf((*MockSdkOperations)(nil).WithDeleteOptions), metaDeleteOptions)
}
